plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "1.2.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    archivesBaseName = rootProject.archives_base_name+"-fabric"
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

curseforge {
    if (System.getenv('CURSEFORGE_KEY') != null) {
        apiKey = System.getenv('CURSEFORGE_KEY')
        project {
            id = 'project_id'
            changelog = 'See: https://github.com/lukebemish/mod_template/blob/main/changelogs/CHANGELOG.md'
            releaseType = 'beta'
            addGameVersion '1.18.1'
            addGameVersion 'Fabric'
            mainArtifact(remapJar) {
                displayName = "Simple Buffers [Fabric] v$project.version"
                relations {
                    requiredDependency 'architectury-fabric'
                    requiredDependency 'fabric-api'
                }
            }
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task modrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
    onlyIf {
        System.getenv("MODRINTH_KEY") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
    }

    token = System.getenv("MODRINTH_KEY") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
    projectId = 'project_id'
    versionNumber = "$project.version-fabric" // Will fail if Modrinth has this version already
    // On fabric, use 'remapJar' instead of 'jar'
    versionType = "BETA"
    detectLoaders = false

    uploadFile = remapJar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
    addGameVersion('1.18.1') // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
    addLoader('fabric')
}

afterEvaluate {
    tasks.curseforge.dependsOn build
    tasks.modrinth.dependsOn build
}
