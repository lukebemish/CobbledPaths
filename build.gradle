buildscript {
    dependencies {
        classpath libs.tinyremapper
    }
}

plugins {
    alias libs.plugins.mdg
    alias libs.plugins.quilt.loom apply false
    alias libs.plugins.quilt.licenser apply false
}

modsDotGroovy {
    dslVersion = libs.versions.mdg.dsl.get()
    platform 'multiloader'
}

tasks.register('printVersionName') {
    doLast{
        println "GRADLE_VERSION=(${project.version}-${libs.versions.minecraft.get()})"
    }
}

allprojects {
    configurations.configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.module.with {it?.name == 'tiny-remapper' && it?.group == 'net.fabricmc'}) {
                details.useTarget libs.tinyremapper
            }
        }
    }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: libs.plugins.quilt.licenser.get().pluginId

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    license {
        rule rootProject.file('header.txt')
        exclude '**/*.mcmeta'
        exclude '**/package-info.java'
    }

    repositories {
        mavenCentral()
        maven {
            name = 'TheModdingInquisition'
            url = 'https://maven.moddinginquisition.org/releases'
        }
        maven {
            url "https://maven.lukebemish.dev/releases"
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }
    tasks.withType(GroovyCompile).configureEach {
        it.groovyOptions.fork = true
        it.groovyOptions.encoding = 'UTF-8'
        it.groovyOptions.optimizationOptions.indy = true
        it.groovyOptions.optimizationOptions.groovydoc = true
        it.groovyOptions.javaAnnotationProcessing = true
        //it.groovyOptions.keepStubs = true // for debugging
        it.groovyOptions.configurationScript = rootProject.file('compile.groovy')
        it.exclude('mods.groovy')
    }

    tasks.compileGroovy { t ->
        t.options.compilerArgs += [
                "-Aautoextension.name=${mod_name}",
                "-Aautoextension.version=${version}"
        ]
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    configurations {
        testCompileOnly.extendsFrom(compileOnly)
    }

    dependencies {
        annotationProcessor libs.autoextension
        annotationProcessor libs.autoservice
        compileOnly libs.autoextension
        compileOnly libs.autoservice
    }
}
